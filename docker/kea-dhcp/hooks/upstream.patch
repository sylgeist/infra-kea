diff -NaurB ../../../kea-hook-runscript/src/callouts.cc hooks/src/callouts.cc
--- ../../../kea-hook-runscript/src/callouts.cc	2022-09-07 15:17:00.000000000 -0600
+++ hooks/src/callouts.cc	2022-11-16 18:55:58.000000000 -0700
@@ -6,493 +6,97 @@
  */
 
 #include <hooks/hooks.h>
-#include <dhcp/pkt4.h>
-#include <dhcp/dhcp6.h>
-#include <dhcp/pkt6.h>
-#include <dhcp/option6_ia.h>
 #include <dhcpsrv/subnet.h>
 #include <dhcpsrv/lease.h>
+#include <dhcpsrv/cfgmgr.h>
 
 #include <string>
 #include <vector>
 
 #include "runscript.h"
+#include "common.h"
 
 using namespace isc::dhcp;
+using namespace isc::data;
 using namespace isc::hooks;
 
 extern "C" {
 
 /* These are helpers that extract relevant information from Kea data
  * structures and store them in environment variables. */
-void extract_bool(std::vector<std::string>& env, const std::string variable, bool value)
-{
+void extract_bool(std::vector<std::string>& env, const std::string variable, bool value) {
     env.push_back(variable + "=" + std::string(value ? "1" : "0"));
 }
 
-/* Extract information from a DHCPv4 packet (query received, or response
- * about to be sent) */
-void extract_pkt4(std::vector<std::string>& env, const std::string envprefix, const Pkt4Ptr pkt4)
-{
-    /* General information */
-    env.push_back(envprefix + "TYPE=" + std::string(pkt4->getName()));
-    env.push_back(envprefix + "INTERFACE=" + pkt4->getIface());
-    env.push_back(envprefix + "IFINDEX=" + std::to_string(pkt4->getIndex()));
-    /* Hardware address */
-    HWAddrPtr hwaddr = pkt4->getHWAddr();
-    if (hwaddr) {
-        env.push_back(envprefix + "HWADDR=" + hwaddr->toText(false));
-        env.push_back(envprefix + "HWADDR_TYPE=" + std::to_string(hwaddr->htype_));
-        env.push_back(envprefix + "HWADDR_SOURCE=" + std::to_string(hwaddr->source_));
-    } else {
-        env.push_back(envprefix + "HWADDR=");
-        env.push_back(envprefix + "HWADDR_TYPE=");
-        env.push_back(envprefix + "HWADDR_SOURCE=");
-    }
-    /* Misc */
-    env.push_back(envprefix + "CIADDR=" + pkt4->getCiaddr().toText());
-    env.push_back(envprefix + "SIADDR=" + pkt4->getSiaddr().toText());
-    env.push_back(envprefix + "YIADDR=" + pkt4->getYiaddr().toText());
-    env.push_back(envprefix + "GIADDR=" + pkt4->getGiaddr().toText());
-    env.push_back(envprefix + "RELAYED=" + std::to_string(pkt4->isRelayed()));
-    env.push_back(envprefix + "RELAY_HOPS=" + std::to_string(pkt4->getHops()));
-
-    /* Specific Options */
-    OptionPtr option60 = pkt4->getOption(60);
-    if (option60) {
-        env.push_back(envprefix + "OPTION60=" + option60->toString());
-    }
-
-    OptionPtr rai = pkt4->getOption(82);
-    if (rai) {
-        env.push_back(envprefix + "RAI=" + rai->toHexString());
-
-        OptionPtr circuit_id = rai->getOption(RAI_OPTION_AGENT_CIRCUIT_ID);
-        if (circuit_id) {
-            env.push_back(envprefix + "RAI_CIRCUIT_ID=" + circuit_id->toHexString());
-        }
-
-        OptionPtr remote_id = rai->getOption(RAI_OPTION_REMOTE_ID);
-        if (remote_id) {
-            env.push_back(envprefix + "RAI_REMOTE_ID=" + remote_id->toHexString());
-        }
-    }
-}
-
-void extract_query4(std::vector<std::string>& env, const Pkt4Ptr query)
-{
-    extract_pkt4(env, "KEA_QUERY4_", query);
-}
-
-void extract_response4(std::vector<std::string>& env, const Pkt4Ptr response)
-{
-    extract_pkt4(env, "KEA_RESPONSE4_", response);
-}
-
-/* Extract information from a DHCPv6 packet (query received, or response
- * about to be sent) */
-void extract_pkt6(std::vector<std::string>& env, const std::string envprefix, const Pkt6Ptr pkt6)
-{
-    /* General information */
-    env.push_back(envprefix + "TYPE=" + std::string(pkt6->getName()));
-    env.push_back(envprefix + "INTERFACE=" + pkt6->getIface());
-    env.push_back(envprefix + "IFINDEX=" + std::to_string(pkt6->getIndex()));
-    HWAddrPtr hwaddr = pkt6->getMAC(HWAddr::HWADDR_SOURCE_ANY);
-    if (hwaddr) {
-        env.push_back(envprefix + "HWADDR=" + hwaddr->toText(false));
-        env.push_back(envprefix + "HWADDR_TYPE=" + std::to_string(hwaddr->htype_));
-        env.push_back(envprefix + "HWADDR_SOURCE=" + std::to_string(hwaddr->source_));
-    } else {
-        env.push_back(envprefix + "HWADDR=");
-        env.push_back(envprefix + "HWADDR_TYPE=");
-        env.push_back(envprefix + "HWADDR_SOURCE=");
-    }
-    env.push_back(envprefix + "LOCAL_ADDRESS=" + pkt6->getLocalAddr().toText());
-    env.push_back(envprefix + "LOCAL_PORT=" + std::to_string(pkt6->getLocalPort()));
-    env.push_back(envprefix + "REMOTE_ADDRESS=" + pkt6->getRemoteAddr().toText());
-    env.push_back(envprefix + "REMOTE_PORT=" + std::to_string(pkt6->getRemotePort()));
-    env.push_back(envprefix + "LABEL=" + pkt6->getLabel());
-    env.push_back(envprefix + "TRANSACTION_ID=" + std::to_string(pkt6->getTransid()));
-    /* TODO */
-    env.push_back(envprefix + "DUID=");
-    /* TODO: all options?  Only common ones?  Which format? */
-    /* TODO */
-    env.push_back(envprefix + "DEBUG=" + pkt6->toText());
-}
-
-void extract_query6(std::vector<std::string>& env, const Pkt6Ptr query)
-{
-    extract_pkt6(env, "KEA_QUERY6_", query);
-}
-
-
-void extract_response6(std::vector<std::string>& env, const Pkt6Ptr response)
-{
-    extract_pkt6(env, "KEA_RESPONSE6_", response);
-}
-
-void extract_subnet4(std::vector<std::string>& env, const Subnet4Ptr subnet)
-{
-    /* The subnet given by Kea might be NULL, this seems to happen when
-     * Kea fails to find a matching subnet for a client request. */
-    if (subnet != NULL) {
-        env.push_back("KEA_SUBNET4=" + subnet->toText());
-        std::pair<isc::asiolink::IOAddress, uint8_t> prefix = subnet->get();
-        env.push_back("KEA_SUBNET4_PREFIX=" + prefix.first.toText());
-        env.push_back("KEA_SUBNET4_PREFIXLEN=" + std::to_string(prefix.second));
-    } else {
-        env.push_back("KEA_SUBNET4=");
-        env.push_back("KEA_SUBNET4_PREFIX=");
-        env.push_back("KEA_SUBNET4_PREFIXLEN=");
-    }
-}
-
-void extract_subnet6(std::vector<std::string>& env, const Subnet6Ptr subnet)
-{
-    if (subnet != NULL) {
-        env.push_back("KEA_SUBNET6=" + subnet->toText());
-        std::pair<isc::asiolink::IOAddress, uint8_t> prefix = subnet->get();
-        env.push_back("KEA_SUBNET6_PREFIX=" + prefix.first.toText());
-        env.push_back("KEA_SUBNET6_PREFIXLEN=" + std::to_string(prefix.second));
-    } else {
-        env.push_back("KEA_SUBNET6=");
-        env.push_back("KEA_SUBNET6_PREFIX=");
-        env.push_back("KEA_SUBNET6_PREFIXLEN=");
-    }
-}
-
-void extract_lease4(std::vector<std::string>& env, const Lease4Ptr lease)
-{
-    env.push_back("KEA_LEASE4_TYPE=V4");
-    env.push_back("KEA_LEASE4_STATE=" + lease->basicStatesToText(lease->state_));
-    extract_bool(env, "KEA_LEASE4_IS_EXPIRED", lease->expired());
+void extract_lease4(std::vector<std::string>& env, const Lease4Ptr lease) {
+    env.push_back("KEA_LEASE4_HOSTNAME=" + lease->hostname_);
     env.push_back("KEA_LEASE4_ADDRESS=" + lease->addr_.toText());
     if (lease->hwaddr_) {
         env.push_back("KEA_LEASE4_HWADDR=" + lease->hwaddr_->toText(false));
     } else {
         env.push_back("KEA_LEASE4_HWADDR=");
     }
-    env.push_back("KEA_LEASE4_HOSTNAME=" + lease->hostname_);
-    env.push_back("KEA_LEASE4_CLIENT_LAST_TRANSMISSION=" + std::to_string(lease->cltt_));
-    env.push_back("KEA_LEASE4_VALID_LIFETIME=" + std::to_string(lease->valid_lft_));
-    env.push_back("KEA_LEASE4_DEBUG=" + lease->toText());
 }
 
-void extract_lease6(std::vector<std::string>& env, const Lease6Ptr lease)
-{
-    env.push_back("KEA_LEASE6_TYPE=" + lease->typeToText(lease->type_));
-    env.push_back("KEA_LEASE6_STATE=" + lease->basicStatesToText(lease->state_));
-    extract_bool(env, "KEA_LEASE6_IS_EXPIRED", lease->expired());
-    env.push_back("KEA_LEASE6_ADDRESS=" + lease->addr_.toText());
-    if (lease->type_ == Lease::TYPE_PD) {
-        env.push_back("KEA_LEASE6_DELEGATED_PREFIX=" + lease->addr_.toText() + "/" + std::to_string(lease->prefixlen_));
-        env.push_back("KEA_LEASE6_DELEGATED_PREFIXLEN=" + std::to_string(lease->prefixlen_));
-    }
-    if (lease->hwaddr_) {
-        env.push_back("KEA_LEASE6_HWADDR=" + lease->hwaddr_->toText(false));
-    } else {
-        env.push_back("KEA_LEASE6_HWADDR=");
+/* Utility function to test whether we are working with a BMC network
+ * Dependent on the Kea generator script adding "user-context" entries to
+ * the subnets imported from Netbox. When correctly performed each subnet
+ * will have something like:
+ *
+ *         "user-context": {
+ *         "role": "bgp-controller"
+ *         }
+ *
+ * in each subnet section to key off of in the hook. */
+bool isOobNetwork(const ConstSubnet4Ptr subnet) {
+    if (subnet) {
+      ConstElementPtr user_context = subnet->getContext();
+      if (user_context && (user_context->getType() == Element::map)) {
+        ConstElementPtr role_element = user_context->get("role");
+        if (role_element && (role_element->getType() == Element::string)) {
+          std::string role = role_element->stringValue(); 
+          if (role.compare("oob-access") == 0) { return true; }
+        }
+      }
     }
-    env.push_back("KEA_LEASE6_HOSTNAME=" + lease->hostname_);
-    env.push_back("KEA_LEASE6_CLIENT_DUID=" + lease->duid_->toText());
-    env.push_back("KEA_LEASE6_CLIENT_LAST_TRANSMISSION=" + std::to_string(lease->cltt_));
-    env.push_back("KEA_LEASE6_VALID_LIFETIME=" + std::to_string(lease->valid_lft_));
-    env.push_back("KEA_LEASE6_PREFERRED_LIFETIME=" + std::to_string(lease->preferred_lft_));
-    env.push_back("KEA_LEASE6_IAID=" + std::to_string(lease->iaid_));
-    env.push_back("KEA_LEASE6_DEBUG=" + lease->toText());
-}
 
-/* IPv4 callouts */
-int pkt4_receive(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt4Ptr query;
-    handle.getArgument("query4", query);
-    extract_query4(env, query);
-    /* Run script */
-    int ret;
-    ret = run_script("pkt4_receive", env);
-    return 0;
+    return false; 
 }
-
-int pkt4_send(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt4Ptr response;
-    Pkt4Ptr query;
-    handle.getArgument("response4", response);
-    extract_response4(env, response);
-    handle.getArgument("query4", query);
-    extract_query4(env, query);
-    /* Run script */
-    int ret;
-    ret = run_script("pkt4_send", env);
-    return 0;
-}
-
-int subnet4_select(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt4Ptr query;
-    Subnet4Ptr subnet;
-    handle.getArgument("query4", query);
-    extract_query4(env, query);
-    handle.getArgument("subnet4", subnet);
-    extract_subnet4(env, subnet);
-    /* Run script */
-    int ret;
-    ret = run_script("subnet4_select", env);
-    return 0;
-}
-
-int lease4_select(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt4Ptr query;
-    Subnet4Ptr subnet;
-    bool fake_allocation;
-    Lease4Ptr lease;
-    handle.getArgument("query4", query);
-    extract_query4(env, query);
-    handle.getArgument("subnet4", subnet);
-    extract_subnet4(env, subnet);
-    handle.getArgument("fake_allocation", fake_allocation);
-    extract_bool(env, "KEA_FAKE_ALLOCATION", fake_allocation);
-    handle.getArgument("lease4", lease);
-    extract_lease4(env, lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease4_select", env);
-    return 0;
-}
-
-int lease4_renew(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt4Ptr query;
-    Subnet4Ptr subnet;
-    Lease4Ptr lease;
-    handle.getArgument("query4", query);
-    extract_query4(env, query);
-    handle.getArgument("subnet4", subnet);
-    extract_subnet4(env, subnet);
-    /* TODO: what is this?  Is it different from what is in the query? */
-    //handle.getArgument("clientid", XX);
-    //handle.getArgument("hwaddr", XX);
-    handle.getArgument("lease4", lease);
-    extract_lease4(env, lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease4_renew", env);
-    return 0;
-}
-
-int lease4_release(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt4Ptr query;
-    Lease4Ptr lease;
-    handle.getArgument("query4", query);
-    extract_query4(env, query);
-    handle.getArgument("lease4", lease);
-    extract_lease4(env, lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease4_release", env);
-    return 0;
-}
-
-int lease4_decline(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt4Ptr query;
-    Lease4Ptr lease;
-    handle.getArgument("query4", query);
-    extract_query4(env, query);
-    handle.getArgument("lease4", lease);
-    extract_lease4(env, lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease4_decline", env);
-    return 0;
-}
-
-int lease4_expire(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Lease4Ptr lease;
-    bool remove_lease;
-    handle.getArgument("lease4", lease);
-    extract_lease4(env, lease);
-    handle.getArgument("remove_lease", remove_lease);
-    extract_bool(env, "KEA_REMOVE_LEASE", remove_lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease4_expire", env);
-    return 0;
-}
-
-int lease4_recover(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Lease4Ptr lease;
-    handle.getArgument("lease4", lease);
-    extract_lease4(env, lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease4_recover", env);
-    return 0;
-}
-
-/* IPv6 callouts */
-int pkt6_receive(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt6Ptr query;
-    handle.getArgument("query6", query);
-    extract_query6(env, query);
-    /* Run script */
-    int ret;
-    ret = run_script("pkt6_receive", env);
-    return 0;
-}
-
-int pkt6_send(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt6Ptr query, response;
-    handle.getArgument("query6", query);
-    extract_query6(env, query);
-    handle.getArgument("response6", response);
-    extract_response6(env, response);
-    /* Run script */
-    int ret;
-    ret = run_script("pkt6_send", env);
-    return 0;
-}
-
-int subnet6_select(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt6Ptr query;
-    Subnet6Ptr subnet;
-    handle.getArgument("query6", query);
-    extract_query6(env, query);
-    handle.getArgument("subnet6", subnet);
-    extract_subnet6(env, subnet);
-    /* Run script */
-    int ret;
-    ret = run_script("subnet6_select", env);
-    return 0;
-}
-
-int lease6_select(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt6Ptr query;
-    Subnet6Ptr subnet;
-    bool fake_allocation;
-    Lease6Ptr lease;
-    handle.getArgument("query6", query);
-    extract_query6(env, query);
-    handle.getArgument("subnet6", subnet);
-    extract_subnet6(env, subnet);
-    handle.getArgument("fake_allocation", fake_allocation);
-    extract_bool(env, "KEA_FAKE_ALLOCATION", fake_allocation);
-    handle.getArgument("lease6", lease);
-    extract_lease6(env, lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease6_select", env);
-    return 0;
-}
-
-int lease6_renew(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt6Ptr query;
-    Lease6Ptr lease;
-    boost::shared_ptr<Option6IA> ia_na;
-    boost::shared_ptr<Option6IA> ia_pd;
-    handle.getArgument("query6", query);
-    extract_query6(env, query);
-    handle.getArgument("lease6", lease);
-    extract_lease6(env, lease);
-    try {
-        handle.getArgument("ia_na", ia_na);
-        /* TODO: use ia_na */
-    } catch (const NoSuchArgument&) { }
-    try {
-        handle.getArgument("ia_pd", ia_pd);
-        /* TODO: use ia_pd */
-    } catch (const NoSuchArgument&) { }
-    /* Run script */
-    int ret;
-    ret = run_script("lease6_renew", env);
-    return 0;
-}
-
-int lease6_rebind(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt6Ptr query;
-    Lease6Ptr lease;
-    boost::shared_ptr<Option6IA> ia_na;
-    boost::shared_ptr<Option6IA> ia_pd;
-    handle.getArgument("query6", query);
-    extract_query6(env, query);
-    handle.getArgument("lease6", lease);
-    extract_lease6(env, lease);
-    try {
-        handle.getArgument("ia_na", ia_na);
-        /* TODO: use ia_na */
-    } catch (const NoSuchArgument&) { }
-    try {
-        handle.getArgument("ia_pd", ia_pd);
-        /* TODO: use ia_pd */
-    } catch (const NoSuchArgument&) { }
-    /* Run script */
-    int ret;
-    ret = run_script("lease6_rebind", env);
-    return 0;
-}
-
-int lease6_decline(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt6Ptr query;
-    Lease6Ptr lease;
-    handle.getArgument("query6", query);
-    extract_query6(env, query);
-    handle.getArgument("lease6", lease);
-    extract_lease6(env, lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease6_decline", env);
-    return 0;
-}
-
-int lease6_release(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Pkt6Ptr query;
-    Lease6Ptr lease;
-    handle.getArgument("query6", query);
-    extract_query6(env, query);
-    handle.getArgument("lease6", lease);
-    extract_lease6(env, lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease6_release", env);
-    return 0;
-}
-
-int lease6_expire(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Lease6Ptr lease;
-    bool remove_lease;
-    handle.getArgument("lease6", lease);
-    extract_lease6(env, lease);
-    handle.getArgument("remove_lease", remove_lease);
-    extract_bool(env, "KEA_REMOVE_LEASE", remove_lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease6_expire", env);
-    return 0;
-}
-
-int lease6_recover(CalloutHandle& handle) {
-    std::vector<std::string> env;
-    Lease6Ptr lease;
-    handle.getArgument("lease6", lease);
-    extract_lease6(env, lease);
-    /* Run script */
-    int ret;
-    ret = run_script("lease6_recover", env);
-    return 0;
+ 
+/* IPv4 leases4_committed hook point */ 
+int leases4_committed(CalloutHandle& handle) {
+    Lease4CollectionPtr leases4;
+
+    handle.getArgument("leases4", leases4);
+
+    if (script_enabled && leases4) { 
+        // Per the docs, Kea may batch multiple leases into the hook call (hence the "Lease4Collection")
+        for (size_t i = 0; i < leases4->size(); ++i) {
+            std::vector<std::string> env;
+            bool bmc_network;
+
+            // The lease commit hook doesn't provide a Subnet pointer so we have to go get it ourselves
+            CfgMgr& cfg_mgr = CfgMgr::instance();
+            ConstSubnet4Ptr subnet = cfg_mgr.getCurrentCfg()->getCfgSubnets4()->getBySubnetId(leases4->at(i)->subnet_id_);
+
+            // In some odd cases Kea may not find the subnet which makes 
+            // all this work pointless and we should exit out
+            if (subnet) {
+                bmc_network = isOobNetwork(subnet);
+            }
+            if (!bmc_network) { return (0); }
+
+            // If we've made it this far we are ready to call the Shipyard update utility
+            extract_lease4(env, leases4->at(i));
+            env.push_back("REGION=" + region_name);
+            env.push_back("SHIPYARD_URL=" + shipyard_url);
+
+            // Enable debug setting in child proc environment
+            extract_bool(env, "DO_GRPC_DEBUG", script_debug);
+            int ret = run_script("leases4_committed", env);
+        }
+    }
+    return (0);
 }
 
 } // end extern "C"
diff -NaurB ../../../kea-hook-runscript/src/common.h hooks/src/common.h
--- ../../../kea-hook-runscript/src/common.h	2022-09-07 15:17:00.000000000 -0600
+++ hooks/src/common.h	2022-11-16 18:54:23.000000000 -0700
@@ -15,7 +15,12 @@
 extern std::string script_path;
 /* Name of the script (without the leading directory). */
 extern std::string script_name;
-/* Wait for script to finish executing */
-extern bool script_wait;
-
+/* Enable/disable script execution */
+extern bool script_enabled;
+/* Shipyard environment */
+extern std::string shipyard_url;
+/* DO region */
+extern std::string region_name;
+/* Debug settings */
+extern bool script_debug;
 }
diff -NaurB ../../../kea-hook-runscript/src/load.cc hooks/src/load.cc
--- ../../../kea-hook-runscript/src/load.cc	2022-09-07 15:17:00.000000000 -0600
+++ hooks/src/load.cc	2022-11-16 18:54:01.000000000 -0700
@@ -19,8 +19,14 @@
 std::string script_path;
 /* Name of the script (without the leading directory). */
 std::string script_name;
-/* Wait for script to finish executing */
-bool script_wait;
+/* Enable/disable script execution */
+bool script_enabled;
+/* Shipyard environment */
+std::string shipyard_url;
+/* DO region*/
+std::string region_name;
+/* Script debug */
+bool script_debug;
 
 extern "C" {
 
@@ -37,20 +43,52 @@
     script_path = script->stringValue();
     script_name = script_path.substr(script_path.find_last_of('/') + 1);
 
-    ConstElementPtr wait = handle.getParameter("wait");
-    if (!wait) {
-       script_wait = true;
-    } else if (wait->getType() != Element::boolean) {
-       LOG_ERROR(runscript_logger, RUNSCRIPT_MISTYPED_PARAM).arg("wait");
-       return 1;
-    } else {
-       script_wait = wait->boolValue();
+    ConstElementPtr enabled = handle.getParameter("enabled");
+    if (!enabled) {
+        LOG_ERROR(runscript_logger, RUNSCRIPT_MISSING_PARAM).arg("enabled");
+        return 1;
+    }
+    if (enabled->getType() != Element::boolean) {
+        LOG_ERROR(runscript_logger, RUNSCRIPT_MISTYPED_PARAM).arg("enabled");
+        return 1;
+    }
+    script_enabled = enabled->boolValue();
+
+    ConstElementPtr shipyard = handle.getParameter("shipyard");
+    if (!shipyard) {
+        LOG_ERROR(runscript_logger, RUNSCRIPT_MISSING_PARAM).arg("shipyard");
+        return 1;
+    }
+    if (shipyard->getType() != Element::string) {
+        LOG_ERROR(runscript_logger, RUNSCRIPT_MISTYPED_PARAM).arg("shipyard");
+        return 1;
+    }
+    shipyard_url = shipyard->stringValue();
+
+    ConstElementPtr region = handle.getParameter("region");
+    if (!region) {
+        LOG_ERROR(runscript_logger, RUNSCRIPT_MISSING_PARAM).arg("region");
+        return 1;
+    }
+    if (region->getType() != Element::string) {
+        LOG_ERROR(runscript_logger, RUNSCRIPT_MISTYPED_PARAM).arg("region");
+        return 1;
+    }
+    region_name = region->stringValue();
+
+    ConstElementPtr debug = handle.getParameter("script_debug");
+    if (!debug) {
+        LOG_ERROR(runscript_logger, RUNSCRIPT_MISSING_PARAM).arg("script_debug");
+        return 1;
+    }
+    if (debug->getType() != Element::boolean) {
+        LOG_ERROR(runscript_logger, RUNSCRIPT_MISTYPED_PARAM).arg("script_debug");
+        return 1;
     }
+    script_debug = debug->boolValue();
 
-     /* Install signal handler for non-wait case to avoid leaving  zombie processes around */
-     if (!script_wait) {
-        signal(SIGCHLD, SIG_IGN);
-     }
+    /* Install signal handler for non-wait case to avoid leaving  zombie processes around */ 
+    signal(SIGCHLD, SIG_IGN);
 
     return 0;
 }
diff -NaurB ../../../kea-hook-runscript/src/logger.cc hooks/src/logger.cc
--- ../../../kea-hook-runscript/src/logger.cc	2022-09-07 15:17:00.000000000 -0600
+++ hooks/src/logger.cc	2022-10-24 08:29:06.000000000 -0600
@@ -7,4 +7,4 @@
 
 #include "logger.h"
 
-isc::log::Logger runscript_logger("hook-runscript");
+isc::log::Logger runscript_logger("hook-do-kea-runscript");
diff -NaurB ../../../kea-hook-runscript/src/messages.cc hooks/src/messages.cc
--- ../../../kea-hook-runscript/src/messages.cc	2022-09-07 15:17:00.000000000 -0600
+++ hooks/src/messages.cc	2022-10-24 08:29:06.000000000 -0600
@@ -8,8 +8,6 @@
 extern const isc::log::MessageID RUNSCRIPT_FORK_FAILED = "RUNSCRIPT_FORK_FAILED";
 extern const isc::log::MessageID RUNSCRIPT_MISSING_PARAM = "RUNSCRIPT_MISSING_PARAM";
 extern const isc::log::MessageID RUNSCRIPT_MISTYPED_PARAM = "RUNSCRIPT_MISTYPED_PARAM";
-extern const isc::log::MessageID RUNSCRIPT_WAITING_SCRIPT = "RUNSCRIPT_WAITING_SCRIPT";
-extern const isc::log::MessageID RUNSCRIPT_WAITPID_FAILED = "RUNSCRIPT_WAITPID_FAILED";
 
 namespace {
 
@@ -18,8 +16,6 @@
     "RUNSCRIPT_FORK_FAILED", "fork() failed with error: %1",
     "RUNSCRIPT_MISSING_PARAM", "required parameter \"%1\" missing in configuration",
     "RUNSCRIPT_MISTYPED_PARAM", "parameter \"%1\" in configuration has wrong type",
-    "RUNSCRIPT_WAITING_SCRIPT", "the user-defined script is running, and the main process is currently waiting",
-    "RUNSCRIPT_WAITPID_FAILED", "waitpid() failed with error: %1",
     NULL
 };
 
diff -NaurB ../../../kea-hook-runscript/src/messages.h hooks/src/messages.h
--- ../../../kea-hook-runscript/src/messages.h	2022-09-07 15:17:00.000000000 -0600
+++ hooks/src/messages.h	2022-10-24 08:29:06.000000000 -0600
@@ -9,7 +9,5 @@
 extern const isc::log::MessageID RUNSCRIPT_FORK_FAILED;
 extern const isc::log::MessageID RUNSCRIPT_MISSING_PARAM;
 extern const isc::log::MessageID RUNSCRIPT_MISTYPED_PARAM;
-extern const isc::log::MessageID RUNSCRIPT_WAITING_SCRIPT;
-extern const isc::log::MessageID RUNSCRIPT_WAITPID_FAILED;
 
 #endif // MESSAGES_H
diff -NaurB ../../../kea-hook-runscript/src/messages.mes hooks/src/messages.mes
--- ../../../kea-hook-runscript/src/messages.mes	2022-09-07 15:17:00.000000000 -0600
+++ hooks/src/messages.mes	2022-10-24 08:29:06.000000000 -0600
@@ -14,11 +14,3 @@
 % RUNSCRIPT_EXEC_FAILED exec() failed, please check that the script exists and is executable. Error: %1
 Attempting to execute the user-defined script failed.
 
-% RUNSCRIPT_WAITPID_FAILED waitpid() failed with error: %1
-The main hook process failed to wait for the child process to exit.
-The hook runs the user-defined script in a child process, and normally waits for it to exit.
-
-% RUNSCRIPT_WAITING_SCRIPT the user-defined script is running, and the main process is currently waiting
-The user-defined script has just been launched, and Kea is waiting for it to exit.
-This is useful to know, because if the user-defined script blocks, Kea will stay stuck
-at this point.
diff -NaurB ../../../kea-hook-runscript/src/multithreading.cc hooks/src/multithreading.cc
--- ../../../kea-hook-runscript/src/multithreading.cc	1969-12-31 17:00:00.000000000 -0700
+++ hooks/src/multithreading.cc	2022-10-24 08:29:06.000000000 -0600
@@ -0,0 +1,6 @@
+// multi_threading_compatible.cc
+extern "C" {
+int multi_threading_compatible() {
+    return (1);
+}
+}
diff -NaurB ../../../kea-hook-runscript/src/runscript.cc hooks/src/runscript.cc
--- ../../../kea-hook-runscript/src/runscript.cc	2022-09-07 15:17:00.000000000 -0600
+++ hooks/src/runscript.cc	2022-10-24 08:29:06.000000000 -0600
@@ -8,7 +8,6 @@
 #include <unistd.h>
 #include <stdlib.h>
 #include <sys/types.h>
-#include <sys/wait.h>
 
 #include <string>
 #include <vector>
@@ -30,7 +29,7 @@
     envp[env.size()] = (char const*) NULL;
 
     /* fork() & execle() */
-    int ret, wstatus, exitcode;
+    int ret;
     pid_t pid;
     pid = fork();
     if (pid == -1) {
@@ -45,24 +44,8 @@
         /* This only exits the child, not Kea itself. */
         exit(EXIT_FAILURE);
     } else {
-        /* Parent process */
-        if (script_wait) {
-            LOG_DEBUG(runscript_logger, 50, RUNSCRIPT_WAITING_SCRIPT);
-            ret = wait(&wstatus);
-            if (ret == -1) {
-                LOG_ERROR(runscript_logger, RUNSCRIPT_WAITPID_FAILED).arg(strerror(errno));
-                return -1;
-            }
-            /* Get exit code */
-            if (WIFEXITED(wstatus))
-                exitcode = WEXITSTATUS(wstatus);
-            else
-                /* By default, assume everything worked well */
-                exitcode = 0;
-            return exitcode;
-        } else {
-            return 0;
-        }
+        /* By default, assume everything worked well */
+        return 0;
     }
 }
 
